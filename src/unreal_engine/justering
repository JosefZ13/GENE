using UnrealBuildTool;

public class project : ModuleRules
{
    public project(ReadOnlyTargetRules Target) : base(Target)
    {
        PCHUsage = PCHUsageMode.UseExplicitOrSharedPCHs;

        // Offentliga beroenden
        PublicDependencyModuleNames.AddRange(new string[] {
            "Core",
            "CoreUObject",
            "Engine",
            "InputCore",
            "Json",
            "JsonUtilities",
            "HTTP",
            "UMG",
            "Slate"
        });

        // Privata beroenden
        PrivateDependencyModuleNames.AddRange(new string[] {
            "Projects",
            "DeveloperSettings",
            "AutomationController",   // För att köra automatiserade tester
            "EditorSubsystem",        // Editor-specifik funktionalitet
            "UnrealEd",               // För editor-funktionalitet
            "SlateCore",              // För UI-element
            "AutomationUtils"         // För att köra tester och hämta resultat
        });

        // Stöd för testning
        if (Target.bCompileAgainstEngine)
        {
            PrivateDependencyModuleNames.AddRange(new string[] {
                "FunctionalTesting", // För funktionella tester
                "AutomationWorker",  // För att interagera med Automation-systemet
            });
        }
    }
}







/*projectgamemode.h justering 
#pragma once

#include "CoreMinimal.h"
#include "GameFramework/GameModeBase.h"
#include "projectGameMode.generated.h"

UCLASS(minimalapi)
class AprojectGameMode : public AGameModeBase
{
    GENERATED_BODY()

public:
    AprojectGameMode();

    // Metod för att simulera testdata
    UFUNCTION(BlueprintCallable, Category = "Testing")
    void SimulateTestData();

    // Överskrivning för integrationstester
    virtual void BeginPlay() override;

    // Test-API
    FString GetGeneratedJSON() const { return newJSON; }
    TArray<AActor*> GetTrackedActors() const;

private:
    FString newJSON;
};
*/

/* justering på projectgamemode.cpp : #include "projectGameMode.h"
#include "Kismet/GameplayStatics.h"
#include "GameFramework/Actor.h"
#include "Engine/World.h"

AprojectGameMode::AprojectGameMode()
{
    newJSON = TEXT("");
}

void AprojectGameMode::BeginPlay()
{
    Super::BeginPlay();
    WholeWorldJson();
}

void AprojectGameMode::SimulateTestData()
{
    UE_LOG(LogTemp, Warning, TEXT("Simulating test data..."));

    // Skapa dummy-aktörer för testning
    for (int i = 0; i < 5; i++)
    {
        AActor* TestActor = GetWorld()->SpawnActor<AActor>();
        if (TestActor)
        {
            TestActor->SetActorLabel(FString::Printf(TEXT("TestActor_%d"), i));
        }
    }

    WholeWorldJson(); // Uppdatera JSON baserat på nya aktörer
    UE_LOG(LogTemp, Warning, TEXT("Test data simulation complete."));
}

TArray<AActor*> AprojectGameMode::GetTrackedActors() const
{
    TArray<AActor*> TrackedActors;
    UGameplayStatics::GetAllActorsOfClass(GetWorld(), AActor::StaticClass(), TrackedActors);
    return TrackedActors;
}
*/
